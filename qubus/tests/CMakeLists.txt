option(QUBUS_BUILD_TESTS "build the Qubus test suite" OFF)

function(qubus_add_test name src_file)
  add_executable(${name} ${src_file})
  target_include_directories(${name} PUBLIC ${GTEST_INCLUDE_DIRS})
  target_link_libraries(${name} qubus ${GTEST_BOTH_LIBRARIES})
  add_test(${name} ${CMAKE_CURRENT_BINARY_DIR}/${name})
  hpx_setup_target(${name} COMPONENT_DEPENDENCIES iostreams)
endfunction()

function(qubus_add_simple_test name)
  qubus_add_test(${name} ${name}.cpp)
endfunction()

function(qubus_qtl_add_test name src_file)
  add_executable(${name} ${src_file})
  target_include_directories(${name} PUBLIC ${GTEST_INCLUDE_DIRS})
  target_link_libraries(${name} qubus_qtl qubus ${GTEST_BOTH_LIBRARIES})
  add_test(${name} ${CMAKE_CURRENT_BINARY_DIR}/${name})
  hpx_setup_target(${name} COMPONENT_DEPENDENCIES iostreams)
endfunction()

function(qubus_qtl_add_simple_test name)
  qubus_qtl_add_test(${name} ${name}.cpp)
endfunction()

if(QUBUS_BUILD_TESTS)
  find_package(GTest REQUIRED)

  qubus_qtl_add_simple_test(basic_expressions)
  qubus_qtl_add_simple_test(contractions)
  qubus_qtl_add_simple_test(multi_indices)
  qubus_qtl_add_simple_test(qm_patterns)
  qubus_qtl_add_simple_test(sparse_support)
  qubus_qtl_add_simple_test(index_semantic)
  qubus_qtl_add_simple_test(parametrized_kernel)
  qubus_qtl_add_simple_test(kronecker_delta)
  qubus_add_simple_test(alias_analysis)
  qubus_add_simple_test(axiom_analysis)
  qubus_add_simple_test(task_invariants_analysis)
  qubus_add_simple_test(value_set_analysis)
  qubus_add_simple_test(value_range_analysis)
  qubus_add_simple_test(static_schedule_analysis)
  qubus_qtl_add_simple_test(slicing)
  qubus_add_simple_test(symbolic_regression)
  qubus_add_simple_test(variable_access_analysis)
  qubus_qtl_add_simple_test(foreign_kernels)
  qubus_qtl_add_simple_test(scalar_support)

  if (TARGET qubus_cuda)
    add_executable(cuda cuda.cpp)
    target_include_directories(cuda PUBLIC ${GTEST_INCLUDE_DIRS})
    target_link_libraries(cuda qubus_cuda ${GTEST_BOTH_LIBRARIES})
    add_test(cuda ${CMAKE_CURRENT_BINARY_DIR}/cuda)

    add_executable(cuda_support cuda_support.cpp)
    target_include_directories(cuda_support PUBLIC ${GTEST_INCLUDE_DIRS})
    target_link_libraries(cuda_support qubus_cuda hpx_init ${GTEST_BOTH_LIBRARIES})
    add_test(cuda_support ${CMAKE_CURRENT_BINARY_DIR}/cuda)
  endif()
endif()